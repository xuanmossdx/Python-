import numpy as np
import random

class DQN:
    def __init__(self, state_dim, action_dim, hidden_dim=128, lr=0.001, gamma=0.99, epsilon=1.0, epsilon_min=0.01, epsilon_decay=0.995):
        self.state_dim = state_dim #状态空间的维度
        self.action_dim = action_dim #动作空间的维度
        self.hidden_dim = hidden_dim #隐藏层的神经元个数
        self.lr = lr #学习率
        self.gamma = gamma #折扣因子
        self.epsilon = epsilon #ε-贪心算法中的ε，用于探索
        self.epsilon_min = epsilon_min #ε-贪心算法中的ε的最小值
        self.epsilon_decay = epsilon_decay #ε-贪心算法中的ε的衰减因子
        self.memory = [] #经验回放的存储器
        self.model = self._build_model() #建立DQN的神经网络模型

    def _build_model(self):
        model = Sequential()
        model.add(Dense(self.hidden_dim, input_dim=self.state_dim, activation='relu'))
        model.add(Dense(self.hidden_dim, activation='relu'))
        model.add(Dense(self.action_dim, activation='linear'))
        model.compile(loss='mse', optimizer=Adam(lr=self.lr))
        return model

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_dim) #以ε的概率随机选取一个动作
        act_values = self.model.predict(state) #用神经网络预测每个动作的Q值
        return np.argmax(act_values[0]) #选择Q值最大的动作

    def replay(self, batch_size):
        minibatch = random.sample(self.memory, batch_size) #从经验回放的存储器中随机选取一批经验
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target = (reward + self.gamma * np.amax(self.model.predict(next_state)[0])) #计算Q-learning的目标Q值
            target_f = self.model.predict(state) #用神经网络预测当前状态下每个动作的Q值
            target_f[0][action] = target #更新Q-learning的目标Q值
            self.model.fit(state, target_f, epochs=1, verbose=0) #更新神经网络的参数
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay #衰减ε的值
